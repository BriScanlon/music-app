version: '3.8'

services:
  mongodb:
    image: mongo:latest
    container_name: mongodb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD}
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - app-network

  service_registry:
    build:
      context: ./service_registry
      dockerfile: Dockerfile
    container_name: service_registry
    ports:
      - "5000:5000"
    networks:
      - app-network

  music_service:
    build:
      context: ./music_service
      dockerfile: Dockerfile
    container_name: music_service
    ports:
      - "5002:5002"
    depends_on:
      - service_registry
      - mongodb
    environment:
      - SERVICE_NAME=music_service
      - SERVICE_URL=http://music_service:5002
      - MONGO_URI=${DATABASE_CONNECTION}
    volumes:
      - music-files:/app/music_files
    networks:
      - app-network
    command: >
      sh -c "python app.py && curl -X POST -H 'Content-Type: application/json'
      -d '{\"name\": \"music_service\", \"url\": \"http://music_service:5002\"}'
      http://service_registry:5000/register"

  recommendation_service:
    build:
      context: ./recommendation_service
      dockerfile: Dockerfile
    container_name: recommendation_service
    ports:
      - "5003:5003"
    depends_on:
      - service_registry
      - mongodb
    environment:
      - SERVICE_NAME=recommendation_service
      - SERVICE_URL=http://recommendation_service:5003
      - MONGO_URI=${DATABASE_CONNECTION}
    networks:
      - app-network
    command: >
      sh -c "python app.py && curl -X POST -H 'Content-Type: application/json'
      -d '{\"name\": \"recommendation_service\", \"url\": \"http://recommendation_service:5003\"}'
      http://service_registry:5000/register"

  spotify-clone:
    build:
      context: ./spotify-clone
      dockerfile: Dockerfile
    container_name: spotify-clone
    ports:
      - "3000:3000"
    depends_on:
      - music_service
      - recommendation_service
    networks:
      - app-network

  nginx:
    build:
      context: .
      dockerfile: ./nginx/Dockerfile
    container_name: nginx
    ports:
      - "80:80"
    depends_on:
      - spotify-clone
      - music_service
      - recommendation_service
    networks:
      - app-network

  auth_service:
    build:
      context: ./auth_service
    container_name: auth_service
    ports:
      - "5004:5004"
    environment:
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_TOKEN_EXPIRE=${JWT_TOKEN_EXPIRE}
      - MONGODB_USER=${MONGODB_USER}
      - MONGODB_PASSWORD=${MONGODB_PASSWORD}
      - DATABASE_CONNECTION=${DATABASE_CONNECTION}
    networks:
      - app-network

volumes:
  mongo-data:
  music-files:

networks:
  app-network:
    driver: bridge
